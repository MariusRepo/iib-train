/*EATE FUNCTION Main() RETURNS BOOLE*/
	BEGIN
		CALL CopyMessageHeaders();
		CALL ValidateUsers();
		RETURN TRUE;
	END;

	CREATE PROCEDURE ValidateUsers()
	BEGIN
		-- variables declarations
		DECLARE userQuery CHARACTER;
		DECLARE DBresult ROW;
		DECLARE userName, firstName, lastName CHARACTER;
		DECLARE i INTEGER 1;
		
		-- input parsing
		DECLARE subscriptions REFERENCE TO InputRoot.XMLNSC.subbatch.subscriptions;
		DECLARE subsNumber INTEGER CARDINALITY(subscriptions.*[]);
		
		-- iterate each user
		WHILE i < subsNumber DO
			-- gather query parameters from input
			DECLARE thisSubscription REFERENCE TO subscriptions.subscription[i];
			SET userName = thisSubscription.user.username;
			SET firstName = thisSubscription.user.firstname;
			SET lastName = thisSubscription.user.lastname;
			
			-- create query for table users
			SET userQuery = 'SELECT * FROM demo.users AS du WHERE username = "' ||userName || '" AND first_name = "' ||firstName || '" AND last_name = "' ||lastName || '"';
			
			--execute query
			SET DBresult = PASSTHRU(userQuery);

			--check result
			IF (CARDINALITY(DBresult) >= 0) THEN
				BEGIN
					-- user is valid, add its user id and assignments to OutputRoot
					SET OutputRoot.XMLNSC.result.users[<].userid = DBresult.id;
					SET OutputRoot.XMLNSC.result.users[<].usernamne = userName; -- for downstream error handling
					SET OutputRoot.XMLNSC.result.users[<].assignments = thisSubscription.user.assignments;
				END;
			ELSE
				BEGIN
					-- prepare error message about the user and add it to the validation errors list in OutputRoot
					DECLARE errorMsg CHARACTER 'Username ' || userName || ' (' || firstName || '/' || lastName || ') incorrect details';
					SET OutputRoot.XMLNSC.result.validationErrors[<].error = errorMsg;
				END;
			END IF;
			SET i = i + 1;
		END WHILE;
	END;
	
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
	
